stages:
  - deploy-staging
  - approval
  - deploy-production

deploy-staging:
  stage: deploy-staging
  image: docker:latest
  script:
    - echo "Deploying to staging environment..."
    - echo "$SSH_PRIVATE_KEY" > /tmp/code-keeper.pem
    - chmod 400 /tmp/code-keeper.pem
    - ssh -o StrictHostKeyChecking=no -i /tmp/code-keeper.pem ubuntu@$DEPLOYMENT_IP "
        echo 'Listing all running Docker containers...';
        sudo docker ps -a;
        echo 'Checking for containers using port 8081...';
        CONTAINERS=\$(sudo docker ps --filter 'publish=8081' --format '{{.ID}}');
        if [ -n \"\$CONTAINERS\" ]; then 
          echo 'Port 8081 is in use. Stopping existing containers...'; 
          for CONTAINER in \$CONTAINERS; do 
            echo \"Stopping container \$CONTAINER\";
            sudo docker stop \$CONTAINER || echo 'No such container to stop'; 
            sudo docker rm \$CONTAINER || echo 'No such container to remove'; 
          done; 
        else
          echo 'No containers are using port 8081!';
        fi;
        echo 'Checking for containers using port 8081...';
        CONTAINERS_8081=\$(sudo docker ps --filter 'publish=8081' --format '{{.ID}}');
        if [ -n \"\$CONTAINERS_8081\" ]; then 
          echo 'Port 8081 is in use. Stopping existing containers...'; 
          for CONTAINER in \$CONTAINERS_8081; do 
            echo \"Stopping container \$CONTAINER\";
            sudo docker stop \$CONTAINER || echo 'No such container to stop'; 
            sudo docker rm \$CONTAINER || echo 'No such container to remove'; 
          done; 
        else
          echo 'No containers are using port 8081.';
        fi;
        echo 'Pulling new Docker image...';
        docker pull $DOCKERHUB_USERNAME/$DOCKER_IMAGE_BILLING:latest;
        echo 'Running new Docker container...';
        docker run -d -p 8081:8080 $DOCKERHUB_USERNAME/$DOCKER_IMAGE_BILLING:latest;
        echo 'Listing all running Docker containers after deployment...';
        sudo docker ps -a"
  only:
    - main

approval:
  stage: approval
  script:
    - echo "Approved to proceed to production deployment"
  dependencies:
    - deploy-staging  
  when: manual
  only:
    - main

deploy-production:
  stage: deploy-production
  image: docker:latest
  script:
    - echo "Deploying to production environment..."
    - echo "$SSH_PRIVATE_KEY" > /tmp/code-keeper.pem
    - chmod 400 /tmp/code-keeper.pem
    - ssh -o StrictHostKeyChecking=no -i /tmp/code-keeper.pem ubuntu@$BILLING_PRODUCTION_IP "
        echo 'Listing all running Docker containers...';
        sudo docker ps -a;
        echo 'Checking for containers using port 8080...';
        CONTAINERS=\$(sudo docker ps --filter 'publish=8080' --format '{{.ID}}');
        if [ -n \"\$CONTAINERS\" ]; then 
          echo 'Port 8080 is in use. Stopping existing containers...'; 
          for CONTAINER in \$CONTAINERS; do 
            echo \"Stopping container \$CONTAINER\";
            sudo docker stop \$CONTAINER || echo 'No such container to stop'; 
            sudo docker rm \$CONTAINER || echo 'No such container to remove'; 
          done; 
        else
          echo 'No containers are using port 8080!';
        fi;
        echo 'Checking for containers using port 8080...';
        CONTAINERS_8080=\$(sudo docker ps --filter 'publish=8080' --format '{{.ID}}');
        if [ -n \"\$CONTAINERS_8080\" ]; then 
          echo 'Port 8080 is in use. Stopping existing containers...'; 
          for CONTAINER in \$CONTAINERS_8080; do 
            echo \"Stopping container \$CONTAINER\";
            sudo docker stop \$CONTAINER || echo 'No such container to stop'; 
            sudo docker rm \$CONTAINER || echo 'No such container to remove'; 
          done; 
        else
          echo 'No containers are using port 8080.';
        fi;
        echo 'Pulling new Docker image...';
        docker pull $DOCKERHUB_USERNAME/$DOCKER_IMAGE_BILLING:latest;
        echo 'Running new Docker container...';
        docker run -d -p 8080:8080 --env PGHOST2_PRODUCTION=$PGHOST2_PRODUCTION --env RABBITMQ_URL_PRODUCTION=$RABBITMQ_URL_PRODUCTION $DOCKERHUB_USERNAME/$DOCKER_IMAGE_BILLING:latest;
        echo 'Listing all running Docker containers after deployment...';
        sudo docker ps -a"
  when: manual
  only:
    - main
